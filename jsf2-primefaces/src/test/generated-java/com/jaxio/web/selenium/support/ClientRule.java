/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-selenium-primefaces:src/test/java/selenium/support/ClientRule.p.vm.java
 */
package com.jaxio.web.selenium.support;

import static com.jaxio.web.selenium.support.Client.ClientBuilder.newClient;
import static java.lang.Boolean.parseBoolean;
import static java.lang.Integer.parseInt;
import static java.lang.System.getProperty;
import static org.apache.commons.lang.StringUtils.substringAfter;

import org.junit.rules.ExternalResource;

import com.jaxio.web.selenium.support.Client;
import com.jaxio.web.selenium.support.ClientRule;

public class ClientRule extends ExternalResource {
    private Client client;
    private Object testInstance;
    private String webDriver = getProperty("selenium.webdriver", "firefox");
    private String httpScheme = getProperty("application.http.scheme", "http");
    private String hostname = getProperty("application.hostname", "localhost");
    private int port = parseInt(getProperty("application.port", "8080"));
    private String context = getProperty("application.contextpath", "appli");
    private int waitTimeInSeconds = parseInt(getProperty("selenium.waitTimeInSeconds", "10"));
    private boolean followVisually = parseBoolean(getProperty("selenium.follow.visually", "true"));

    public ClientRule(Object testInstance) {
        this.testInstance = testInstance;
    }

    public ClientRule withHttpScheme(String httpScheme) {
        this.httpScheme = httpScheme;
        return this;
    }

    public ClientRule withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    public ClientRule withPort(int port) {
        this.port = port;
        return this;
    }

    public ClientRule withContext(String context) {
        this.context = context;
        return this;
    }

    public ClientRule withWebDriver(String webDriver) {
        this.webDriver = webDriver;
        return this;
    }

    public ClientRule withWaitTimeInSeconds(int waitTimeInSeconds) {
        this.waitTimeInSeconds = waitTimeInSeconds;
        return this;
    }

    public ClientRule withFollowingVisually() {
        this.followVisually = true;
        return this;
    }

    public ClientRule withoutFollowingVisually() {
        this.followVisually = false;
        return this;
    }

    @Override
    protected void before() throws Throwable {
        client = newClient() //
                .baseUrl(buildBaseUrl()) //
                .webDriver(webDriver) //
                .waitTimeInSeconds(waitTimeInSeconds) //
                .followVisually(followVisually) //
                .onTest(testInstance) //
                .build();
    }

    @Override
    protected void after() {
        client.close();
    }

    private String buildBaseUrl() {
        if (context == null) {
            throw new IllegalStateException("You need to have application.contextpath in your properties defined");
        }
        if (context.startsWith("/")) {
            context = substringAfter(context, "/");
        }
        return httpScheme + "://" + hostname + ":" + port + "/" + context;
    }

    public Client getClient() {
        return client;
    }
}