/*
 * (c) Copyright 2005-2012 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/domain/Controller.e.vm.java
 */
package com.jaxio.web.domain;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import com.jaxio.dao.support.SearchParameters;
import com.jaxio.domain.Account;
import com.jaxio.domain.Address;
import com.jaxio.domain.Book;
import com.jaxio.domain.Document;
import com.jaxio.domain.Role;
import com.jaxio.repository.AccountRepository;
import com.jaxio.web.conversation.Conversation;
import com.jaxio.web.conversation.ConversationCallBack;
import com.jaxio.web.conversation.ConversationFactory;
import com.jaxio.web.domain.AddressContext;
import com.jaxio.web.domain.support.GenericController;

/**
 * Stateless controller for {@link Account}.
 */
@Named
@Singleton
public class AccountController extends GenericController<Account, String> implements ConversationFactory {

    @Inject
    public AccountController(AccountRepository accountRepository) {
        super(accountRepository);
    }

    // --------------------------------------------
    // ConversationFactory impl
    // --------------------------------------------

    @Override
    public boolean canCreate(HttpServletRequest request) {
        return AccountContext.selectUri.equals(request.getServletPath());
    }

    @Override
    public Conversation create(HttpServletRequest request) {
        String uri = request.getServletPath();
        if (AccountContext.selectUri.equals(uri)) {
            Conversation conversation = new Conversation();
            AccountContext ctx = new AccountContext();
            ctx.setLabelWithKey("account");
            ctx.setUri(uri);
            conversation.push(ctx);
            return conversation;
        }

        throw new IllegalStateException("Unexpected conversation creation demand");
    }

    // --------------------------------------------
    // homeAddress association
    // --------------------------------------------

    public String viewHomeAddress() {
        AddressContext ctx = new AddressContext(accountContext().getAccount().getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setUri(AddressContext.editUri);
        conversation().pushSubReadOnly(ctx);
        return ctx.outcome();
    }

    public String selectHomeAddress() {
        AddressContext ctx = new AddressContext();
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setUri(AddressContext.selectUri);
        ctx.setCallBack(selectHomeAddressCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Address> selectHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the AccountLazyDataModel
        @Override
        protected void onSelected(Address address) {
            accountContext().getAccount().setHomeAddress(address);
            messageUtil.infoEntity("status_selected_ok", address);
        }
    };

    public String addHomeAddress() {
        AddressContext ctx = new AddressContext(new Address());
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setUri(AddressContext.editUri);
        ctx.setCallBack(addHomeAddressCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Address> addHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Address address) {
            accountContext().getAccount().setHomeAddress(address);
            messageUtil.infoEntity("status_created_ok", address);
        }
    };

    public String editHomeAddress() {
        AddressContext ctx = new AddressContext(accountContext().getAccount().getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setUri(AddressContext.editUri);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    // --------------------------------------------
    // book association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected book.
     */
    public String editBook() {
        BookContext ctx = new BookContext(accountContext().getSelectedBook());
        ctx.setLabelWithKey("account_books");
        ctx.setUri(BookContext.editUri);
        ctx.setCallBack(editBookCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Book> editBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            messageUtil.infoEntity("status_edited_ok", book);
        }
    };

    public String viewBook() {
        BookContext ctx = new BookContext(accountContext().getSelectedBook());
        ctx.setLabelWithKey("account_books");
        ctx.setUri(BookContext.editUri);
        conversation().pushSubReadOnly(ctx);
        return ctx.outcome();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onBookRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewBook() : editBook());
    }

    public void removeBook() {
        AccountContext ctx = accountContext();
        ctx.getAccount().removeBook(ctx.getSelectedBook());
        messageUtil.infoEntity("status_removed_ok", ctx.getSelectedBook());
    }

    public String addBook() {
        BookContext ctx = new BookContext(new Book());
        ctx.setLabelWithKey("account_books");
        ctx.setUri(BookContext.editUri);
        ctx.setCallBack(addBookCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Book> addBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            accountContext().getAccount().addBook(book);
            messageUtil.infoEntity("status_added_new_ok", book);
        }
    };

    // --------------------------------------------
    // document association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected document.
     */
    public String editDocument() {
        DocumentContext ctx = new DocumentContext(accountContext().getSelectedDocument());
        ctx.setLabelWithKey("account_documents");
        ctx.setUri(DocumentContext.editUri);
        ctx.setCallBack(editDocumentCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Document> editDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            messageUtil.infoEntity("status_edited_ok", document);
        }
    };

    public String viewDocument() {
        DocumentContext ctx = new DocumentContext(accountContext().getSelectedDocument());
        ctx.setLabelWithKey("account_documents");
        ctx.setUri(DocumentContext.editUri);
        conversation().pushSubReadOnly(ctx);
        return ctx.outcome();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onDocumentRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewDocument() : editDocument());
    }

    public void removeDocument() {
        AccountContext ctx = accountContext();
        ctx.getAccount().removeDocument(ctx.getSelectedDocument());
        messageUtil.infoEntity("status_removed_ok", ctx.getSelectedDocument());
    }

    public String addDocument() {
        DocumentContext ctx = new DocumentContext(new Document());
        ctx.setLabelWithKey("account_documents");
        ctx.setUri(DocumentContext.editUri);
        ctx.setCallBack(addDocumentCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Document> addDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            accountContext().getAccount().addDocument(document);
            messageUtil.infoEntity("status_added_new_ok", document);
        }
    };

    // --------------------------------------------
    // role association
    // --------------------------------------------
    public String selectRole() {
        RoleContext ctx = new RoleContext();
        ctx.setLabelWithKey("account_roles");
        ctx.setUri(RoleContext.selectUri);
        ctx.setCallBack(selectRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Role> selectRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onSelected(Role role) {
            accountContext().getAccount().addRole(role);
            messageUtil.infoEntity("status_added_existing_ok", role);
        }
    };

    /**
     * Action with implicit navigation to edit the selected role.
     */
    public String editRole() {
        RoleContext ctx = new RoleContext(accountContext().getSelectedRole());
        ctx.setLabelWithKey("account_roles");
        ctx.setUri(RoleContext.editUri);
        ctx.setCallBack(editRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Role> editRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            messageUtil.infoEntity("status_edited_ok", role);
        }
    };

    public String viewRole() {
        RoleContext ctx = new RoleContext(accountContext().getSelectedRole());
        ctx.setLabelWithKey("account_roles");
        ctx.setUri(RoleContext.editUri);
        conversation().pushSubReadOnly(ctx);
        return ctx.outcome();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onRoleRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewRole() : editRole());
    }

    public void removeRole() {
        AccountContext ctx = accountContext();
        ctx.getAccount().removeRole(ctx.getSelectedRole());
        messageUtil.infoEntity("status_removed_ok", ctx.getSelectedRole());
    }

    public String addRole() {
        RoleContext ctx = new RoleContext(new Role());
        ctx.setLabelWithKey("account_roles");
        ctx.setUri(RoleContext.editUri);
        ctx.setCallBack(addRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.outcome();
    }

    private ConversationCallBack<Role> addRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            accountContext().getAccount().addRole(role);
            messageUtil.infoEntity("status_added_new_ok", role);
        }
    };

    @Override
    public SearchParameters searchParametersForComplete(String value) {
        SearchParameters sp = super.searchParametersForComplete(value);
        // order by business key
        sp.orderBy("username");
        return sp;
    }

    protected final AccountContext accountContext() {
        return conversation().getCurrentContext();
    }
}