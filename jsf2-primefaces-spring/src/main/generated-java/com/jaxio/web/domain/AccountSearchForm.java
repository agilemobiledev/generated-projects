/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.jaxio.web.domain;

import static com.jaxio.dao.support.EntitySelector.newEntitySelector;
import static com.jaxio.dao.support.PropertySelector.newPropertySelector;
import static com.jaxio.dao.support.Ranges.RangeDate.newRangeDate;
import static com.jaxio.domain.Account_.addressId;
import static com.jaxio.domain.Account_.birthDate;
import static com.jaxio.domain.Account_.civility;
import static com.jaxio.domain.Account_.homeAddress;
import static com.jaxio.domain.Account_.isEnabled;
import javax.inject.Named;
import org.springframework.context.annotation.Scope;
import com.jaxio.dao.support.EntitySelector;
import com.jaxio.dao.support.PropertySelector;
import com.jaxio.dao.support.Ranges.RangeDate;
import com.jaxio.dao.support.SearchParameters;
import com.jaxio.domain.Account;
import com.jaxio.domain.Address;
import com.jaxio.domain.Civility;
import com.jaxio.web.domain.support.GenericSearchForm;

/**
 * View Helper to find/select {@link Account}.
 * It exposes a {@link Account} instance so it can be used in search by Example query.
 */
@Named
@Scope("conversation")
public class AccountSearchForm extends GenericSearchForm<Account, AccountSearchForm> {
    private static final long serialVersionUID = 1L;

    private Account account = new Account();
    private RangeDate<Account> birthDateRange = newRangeDate(birthDate);
    private PropertySelector<Account, Boolean> isEnabledSelector = newPropertySelector(isEnabled);
    private PropertySelector<Account, Civility> civilitySelector = newPropertySelector(civility);
    private EntitySelector<Account, Address, Integer> homeAddressSelector = newEntitySelector(addressId);

    public Account getAccount() {
        return account;
    }

    @Override
    protected Account getEntity() {
        return account;
    }

    // Ranges, used from the view.
    public RangeDate<Account> getBirthDateRange() {
        return birthDateRange;
    }

    // Selectors for property
    public PropertySelector<Account, Boolean> getIsEnabledSelector() {
        return isEnabledSelector;
    }

    public PropertySelector<Account, Civility> getCivilitySelector() {
        return civilitySelector;
    }

    // Selectors for x-to-one associations
    public EntitySelector<Account, Address, Integer> getHomeAddressSelector() {
        return homeAddressSelector;
    }

    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .anywhere() //
                .leftJoin(homeAddress) //
                .range(birthDateRange) //
                .propertySelector(isEnabledSelector) //
                .propertySelector(civilitySelector) //
                .entitySelector(homeAddressSelector) //
        ;
    }

    @Override
    public AccountSearchForm newInstance() {
        return new AccountSearchForm();
    }

    @Override
    public void resetWithOther(AccountSearchForm other) {
        this.account = other.getAccount();
        this.birthDateRange = other.getBirthDateRange();
        this.isEnabledSelector = other.getIsEnabledSelector();
        this.civilitySelector = other.getCivilitySelector();
        this.homeAddressSelector = other.getHomeAddressSelector();
    }
}