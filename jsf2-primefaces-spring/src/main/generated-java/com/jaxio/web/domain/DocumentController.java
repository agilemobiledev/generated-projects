/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/domain/Controller.e.vm.java
 */
package com.jaxio.web.domain;

import java.io.ByteArrayInputStream;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.servlet.http.HttpServletRequest;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import com.jaxio.domain.Document;
import com.jaxio.repository.DocumentRepository;
import com.jaxio.web.conversation.Conversation;
import com.jaxio.web.conversation.ConversationFactory;
import com.jaxio.web.domain.AccountContext;
import com.jaxio.web.domain.support.GenericController;

/**
 * Stateless controller for {@link Document}.
 */
@Named
@Singleton
public class DocumentController extends GenericController<Document, String> implements ConversationFactory {

    @Inject
    public DocumentController(DocumentRepository documentRepository) {
        super(documentRepository);
    }

    // --------------------------------------------
    // ConversationFactory impl
    // --------------------------------------------

    @Override
    public boolean canCreateConversation(HttpServletRequest request) {
        return DocumentContext.selectUri.equals(request.getServletPath());
    }

    @Override
    public Conversation createConversation(HttpServletRequest request) {
        String uri = request.getServletPath();
        if (DocumentContext.selectUri.equals(uri)) {
            Conversation conversation = Conversation.newInstance(request);
            DocumentContext ctx = new DocumentContext();
            ctx.setLabelWithKey("document");
            ctx.setViewUri(DocumentContext.selectUri);
            conversation.push(ctx);
            return conversation;
        }

        throw new IllegalStateException("Unexpected conversation creation demand");
    }

    // --------------------------------------------
    // account association
    // --------------------------------------------

    public String viewAccount() {
        AccountContext ctx = new AccountContext(documentContext().getDocument().getAccount());
        ctx.setLabelWithKey("document_account");
        ctx.setViewUri(AccountContext.editUri);
        conversation().pushSubReadOnly(ctx);
        return ctx.view();
    }

    public DocumentUploadHandler getUploadHandler(Document document) {
        return new DocumentUploadHandler(document);
    }

    /**
     * Primefaces support for documentBinary file download
     */
    public StreamedContent getStreamedContent(Document document) {
        return new DefaultStreamedContent(new ByteArrayInputStream(document.getDocumentBinary()), document.getDocumentContentType(), document
                .getDocumentFileName());
    }

    protected final DocumentContext documentContext() {
        return conversation().getCurrentContext();
    }
}