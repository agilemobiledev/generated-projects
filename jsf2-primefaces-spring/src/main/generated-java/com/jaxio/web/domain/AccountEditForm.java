/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/domain/EditForm.e.vm.java
 */
package com.jaxio.web.domain;

import javax.inject.Inject;
import javax.inject.Named;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import org.springframework.context.annotation.Scope;
import com.jaxio.domain.Account;
import com.jaxio.domain.Address;
import com.jaxio.domain.Book;
import com.jaxio.domain.Document;
import com.jaxio.domain.Role;
import com.jaxio.repository.AccountRepository;
import com.jaxio.web.conversation.ConversationCallBack;
import com.jaxio.web.conversation.ConversationContext;
import com.jaxio.web.domain.AddressController;
import com.jaxio.web.domain.support.GenericEditForm;
import com.jaxio.web.domain.support.SelectableListDataModel;
import com.jaxio.web.util.TabBean;

/**
 * View Helper to edit {@link Account}.
 */
@Named
@Scope("conversation")
public class AccountEditForm extends GenericEditForm<Account, String> {
    private Account account;
    private TabBean tabBean = new TabBean();
    private SelectableListDataModel<Book> books;
    private SelectableListDataModel<Document> documents;
    private SelectableListDataModel<Role> roles;

    @Inject
    public AccountEditForm(AccountRepository accountRepository) {
        super(accountRepository);
    }

    @Override
    protected void onInit(Account param) {
        this.account = param;
        books = new SelectableListDataModel<Book>(account.getBooks());
        documents = new SelectableListDataModel<Document>(account.getDocuments());
        roles = new SelectableListDataModel<Role>(account.getRoles());
    }

    @Override
    public Account getEntity() {
        return account;
    }

    public Account getAccount() {
        return account;
    }

    public TabBean getTabBean() {
        return tabBean;
    }

    public SelectableListDataModel<Book> getBooks() {
        return books;
    }

    public SelectableListDataModel<Document> getDocuments() {
        return documents;
    }

    public SelectableListDataModel<Role> getRoles() {
        return roles;
    }

    // --------------------------------------------
    // Actions for homeAddress association
    // --------------------------------------------

    public String viewHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(account.getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        conversation().pushSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newSearchContext();
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setCallBack(selectHomeAddressCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Address> selectHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the AccountLazyDataModel
        @Override
        protected void onSelected(Address address) {
            account.setHomeAddress(address);
            messageUtil.infoEntity("status_selected_ok", address);
        }
    };

    public String addHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(new Address());
        ctx.setLabelWithKey("account_homeAddress");
        ctx.setCallBack(addHomeAddressCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Address> addHomeAddressCallBack = new ConversationCallBack<Address>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Address address) {
            account.setHomeAddress(address);
            messageUtil.infoEntity("status_created_ok", address);
        }
    };

    public String editHomeAddress() {
        ConversationContext<Address> ctx = AddressController.newEditContext(account.getHomeAddress());
        ctx.setLabelWithKey("account_homeAddress");
        conversation().pushSub(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for book association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected book.
     */
    public String editBook() {
        ConversationContext<Book> ctx = BookController.newEditContext(books.getSelectedRow());
        ctx.setLabelWithKey("account_books");
        ctx.setCallBack(editBookCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Book> editBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            messageUtil.infoEntity("status_edited_ok", book);
        }
    };

    public String viewBook() {
        ConversationContext<Book> ctx = BookController.newEditContext(books.getSelectedRow());
        ctx.setLabelWithKey("account_books");
        conversation().pushSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onBookRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewBook() : editBook());
    }

    public void removeBook() {
        account.removeBook(books.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", books.getSelectedRow());
    }

    public String addBook() {
        ConversationContext<Book> ctx = BookController.newEditContext(new Book());
        ctx.setLabelWithKey("account_books");
        ctx.setCallBack(addBookCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Book> addBookCallBack = new ConversationCallBack<Book>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Book book) {
            account.addBook(book);
            messageUtil.infoEntity("status_added_new_ok", book);
        }
    };

    // --------------------------------------------
    // Actions for document association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected document.
     */
    public String editDocument() {
        ConversationContext<Document> ctx = DocumentController.newEditContext(documents.getSelectedRow());
        ctx.setLabelWithKey("account_documents");
        ctx.setCallBack(editDocumentCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Document> editDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            messageUtil.infoEntity("status_edited_ok", document);
        }
    };

    public String viewDocument() {
        ConversationContext<Document> ctx = DocumentController.newEditContext(documents.getSelectedRow());
        ctx.setLabelWithKey("account_documents");
        conversation().pushSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onDocumentRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewDocument() : editDocument());
    }

    public void removeDocument() {
        account.removeDocument(documents.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", documents.getSelectedRow());
    }

    public String addDocument() {
        ConversationContext<Document> ctx = DocumentController.newEditContext(new Document());
        ctx.setLabelWithKey("account_documents");
        ctx.setCallBack(addDocumentCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Document> addDocumentCallBack = new ConversationCallBack<Document>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Document document) {
            account.addDocument(document);
            messageUtil.infoEntity("status_added_new_ok", document);
        }
    };

    // --------------------------------------------
    // Actions for role association
    // --------------------------------------------
    public String selectRole() {
        ConversationContext<Role> ctx = RoleController.newSearchContext();
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(selectRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Role> selectRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onSelected(Role role) {
            account.addRole(role);
            messageUtil.infoEntity("status_added_existing_ok", role);
        }
    };

    /**
     * Action with implicit navigation to edit the selected role.
     */
    public String editRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(editRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Role> editRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            messageUtil.infoEntity("status_edited_ok", role);
        }
    };

    public String viewRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        conversation().pushSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link ${relation.toEntity.type}}.
     */
    public void onRoleRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewRole() : editRole());
    }

    public void removeRole() {
        account.removeRole(roles.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", roles.getSelectedRow());
    }

    public String addRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(new Role());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(addRoleCallBack);
        conversation().pushSub(ctx);
        return ctx.view();
    }

    private ConversationCallBack<Role> addRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            account.addRole(role);
            messageUtil.infoEntity("status_added_new_ok", role);
        }
    };
}