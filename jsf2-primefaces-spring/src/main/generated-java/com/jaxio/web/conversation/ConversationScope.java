/*
 * (c) Copyright 2005-2012 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/conversation/ConversationScope.p.vm.java
 */
package com.jaxio.web.conversation;

import org.springframework.beans.factory.ObjectFactory;
import org.springframework.beans.factory.config.Scope;

/**
 * The conversation scope is bound to a {@link ConversationContext}.
 * Bean in the conversation scope live as long as the corresponding conversation context lives, that is
 * as long as the conversation context is part of a conversation.
 * 
 * Note that beans in the conversation scope are visible only when 
 * the {@link Conversation} is active (bound to the current Thread of execution) and 
 * the context is on top of the conversation's contextes stack.
 * 
 * A conversation could have 2 conversation scoped beans having the same name as long as they reside in different conversation contextes. 
 */
public class ConversationScope implements Scope {

    protected ConversationManager cm;

    public void setConversationManager(ConversationManager cm) {
        this.cm = cm;
    }

    @Override
    public String getConversationId() {
        return cm.getCurrentConversation().getId();
    }

    @Override
    public Object get(String name, ObjectFactory<?> objectFactory) {
        Object bean = cm.getCurrentConversation().getBean(name);

        if (bean == null) {
            bean = objectFactory.getObject();
            cm.getCurrentConversation().addBean(name, bean);
        }

        // TODO: here we could re-wire dependencies using http://jira.springframework.org/browse/SWF-1224
        // in case we want to serialize context... 

        return bean;
    }

    @Override
    public Object remove(String name) {
        throw new UnsupportedOperationException("remove is done during conversation.end");
    }

    @Override
    public void registerDestructionCallback(String name, Runnable callback) {
        // no ops
    }

    @Override
    public Object resolveContextualObject(String key) {
        return cm.getCurrentConversation().getVar(key);
    }
}