/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/conversation/Conversation.p.vm.java
 */
package com.jaxio.web.conversation;

import java.io.Serializable;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicInteger;

import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * A conversation holds a context stack (1 context per view visited) and the entity manager used 
 * during the entire conversation (spans over several view).
 */
public class Conversation implements Serializable {
    public static final String CONVERSATION_COUNTER_KEY = "convCounter";

    private static final long serialVersionUID = 1L;

    private String id;
    private EntityManager em;
    private Stack<ConversationContext<?>> contextes = new Stack<ConversationContext<?>>();
    private boolean popCurrentContextOnNextPause = false;
    private ConversationContext<?> nextContext;

    /**
     * Create a new conversation and assign it a unique id in the scope of the user's session.
     */
    public static Conversation newInstance(HttpServletRequest request) {
        HttpSession session = request.getSession();
        AtomicInteger counter = (AtomicInteger) session.getAttribute(CONVERSATION_COUNTER_KEY);
        if (counter == null) {
            counter = new AtomicInteger(0);
            session.setAttribute(CONVERSATION_COUNTER_KEY, counter);
        }

        return new Conversation(String.valueOf(counter.incrementAndGet()));
    }

    public Conversation() {
    }

    public Conversation(String id) {
        this.id = id;
    }

    /**
     * Returns this conversation Id.
     */
    public String getId() {
        return id;
    }

    public void setEntityManager(EntityManager entityManager) {
        this.em = entityManager;
    }

    public EntityManager getEntityManager() {
        return em;
    }

    /**
     * Set a flag to instruct the conversation manager to pop the current conversation context when it pauses the current conversation.
     * Why do we need this? When an action is triggered from within a dataTable, the JSF runtime executes some EL after our action. By doing so 
     * it requests a conversation scoped bean that belongs to the current context. If this context is popped too soon, the bean is recreated!
     * @param popCurrentContextOnNextPause
     */
    public void setPopCurrentContextOnNextPause(boolean popCurrentContextOnNextPause) {
        this.popCurrentContextOnNextPause = popCurrentContextOnNextPause;
    }

    /**
     * Whether the current conversation context should be popped by the conversatin manager before pausing the current conversation.
     * @return
     */
    public boolean isPopCurrentContextOnNextPause() {
        return popCurrentContextOnNextPause;
    }

    public void setNextContext(ConversationContext<?> newContext) {
        newContext.setConversationId(getId());
        // we delay the context push because apparently some EL is invoked after bean action is performed
        // which it leads in some cases to re-creation of 'conversation scoped' bean.
        nextContext = newContext; // will be pushed at next request during resuming...
    }

    protected void pushNextContext() {
        if (nextContext != null) {
            contextes.push(nextContext);
            nextContext = null;
        }
    }

    public void setNextContextSub(ConversationContext<?> newContext) {
        newContext.setSub(true);
        setNextContext(newContext);
    }

    public void setNextContextSubReadOnly(ConversationContext<?> newContext) {
        newContext.setSub(true);
        newContext.setReadonly(true);
        setNextContext(newContext);
    }

    public void setNextContextReadOnly(ConversationContext<?> newContext) {
        newContext.setReadonly(true);
        setNextContext(newContext);
    }

    @SuppressWarnings("unchecked")
    public <T extends ConversationContext<?>> T getCurrentContext() {
        return (T) contextes.peek();
    }

    protected Stack<ConversationContext<?>> getConversationContextes() {
        return contextes;
    }

    protected ConversationContext<?> popCurrentContext() {
        if (contextes.size() > 1) {
            return contextes.pop();
        } else {
            throw new IllegalStateException("Attention, trying to pop the initial context. Sign of unbalanced push/pop");
        }
    }

    /**
     * Returns the view url for the next page. Used by action when returning the view.
     */
    public String nextView() {
        if (nextContext != null) {
            return nextContext.view();
        }

        if (popCurrentContextOnNextPause) {
            ConversationContext<?> beforeLast = contextes.elementAt(contextes.size() - 2);
            return beforeLast.view();
        }

        return contextes.peek().view();
    }

    public String nextUrl() {
        if (nextContext != null) {
            return nextContext.getUrl();
        }

        if (popCurrentContextOnNextPause) {
            ConversationContext<?> beforeLast = contextes.elementAt(contextes.size() - 2);
            return beforeLast.getUrl();
        }

        return contextes.peek().getUrl();
    }

    // ------------------------------------------
    // Methods below use the last pushed context
    // ------------------------------------------

    /**
     * @return the label of the last pushed context. 
     */
    public String getLabel() {
        return contextes.peek().getLabel();
    }

    /**
     * @return the menu url of the last pushed context. 
     */
    public String getUrl() {
        return contextes.peek().getUrl();
    }

    /**
     * @return the uri of the last pushed context. 
     */
    public String getViewUri() {
        return contextes.peek().getViewUri();
    }

    public void addBean(String name, Object bean) {
        contextes.peek().addBean(name, bean);
    }

    public Object getBean(String name) {
        return contextes.peek().getBean(name);
    }

    public void setVar(String name, Object var) {
        contextes.peek().setVar(name, var);
    }

    public Object getVar(String name) {
        return contextes.peek().getVar(name);
    }

    public <T> T getVar(String name, Class<T> type) {
        return (T) contextes.peek().getVar(name, type);
    }
}
