/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/conversation/ConversationContext.p.vm.java
 */
package com.jaxio.web.conversation;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import com.jaxio.util.ResourcesUtil;

/**
 * Context holding variables and 'conversation' scoped beans so they can be accessed from the view.
 * Note that you can change the view of the context. This allows you to navigate from page to page
 * using the same context.
 */
public class ConversationContext<T> implements Serializable {
    private static final long serialVersionUID = 1L;

    // support for 'conversation' scope
    private Map<String, Object> beans = new HashMap<String, Object>();
    private Map<String, Object> vars = new HashMap<String, Object>();

    private String conversationId;
    private ConversationCallBack<T> callBack = new ConversationCallBack<T>();
    private String label;
    private String viewUri;
    private boolean persistenceContext = true;

    public void setPersistenceContext(boolean persistenceContext) {
        this.persistenceContext = persistenceContext;
    }

    /**
     * Whether this context relies on the conversation's entity manager or not.
     * If true, then the entity manager of the conversation is used.
     */
    public boolean isPersistenceContext() {
        return persistenceContext;
    }

    public void setConversationId(String conversationId) {
        this.conversationId = conversationId;
    }

    /**
     * Sets the label displayed in the conversation menu.
     * @param labelKey the property key.
     */
    public void setLabelWithKey(String labelKey) {
        this.label = ResourcesUtil.getInstance().getProperty(labelKey);
    }

    /**
     * Sets the label displayed in the conversation menu.
     * @param label the label.
     */
    public void setLabel(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }

    /**
     * Sets the viewUri attached to this context. 
     */
    public void setViewUri(String viewUri) {
        this.viewUri = viewUri;
    }

    /**
     * The viewUri attached to this context.
     */
    public String getViewUri() {
        return viewUri;
    }

    /**
     * Sets the 'sub' variable.
     */
    public void setSub(boolean sub) {
        setVar("sub", sub);
    }

    public boolean isSub() {
        return getVar("sub") != null ? (Boolean) getVar("sub") : false;
    }

    /**
     * Sets the 'readonly' variable.
     */
    public void setReadonly(boolean readonly) {
        setVar("readonly", readonly);
    }

    public boolean isReadOnly() {
        return getVar("readonly") != null ? (Boolean) getVar("readonly") : false;
    }

    /**
     * Helper to set an entity parameter in this context so it can be used in the view when calling the editForm init method.
     */
    public void setEntityParam(String paramName, T entity) {
        setVar(paramName, entity);
    }

    /**
     * The callback to use just after this context is popped from the conversation's context stack. 
     */
    public void setCallBack(ConversationCallBack<T> callBack) {
        this.callBack = callBack;
    }

    public ConversationCallBack<T> getCallBack() {
        return callBack;
    }

    public String getMenuUrl() {
        checkViewUriAndConversationId();
        return viewUri + "?_cid_=" + conversationId;
    }

    /**
     * Return the view to display for this context. The view is simply the viewUri + additionnal parameters.
     */
    public String view() {
        checkViewUriAndConversationId();
        return viewUri + "?faces-redirect=true&_cid_=" + conversationId;
    }

    private void checkViewUriAndConversationId() {
        if (viewUri == null) {
            throw new IllegalStateException("Developer! viewUri is null, it must be setbefore calling view() or getMenuUrl() methods");
        }

        if (conversationId == null) {
            throw new IllegalStateException("Developer! conversationId is null, it must be set before calling view() or getMenuUrl() methods");
        }
    }

    // ----------------------------------
    // Support for conversation scope
    // ----------------------------------

    void addBean(String name, Object bean) {
        beans.put(name, bean);
    }

    Object getBean(String name) {
        return beans.get(name);
    }

    public void setVar(String name, Object var) {
        vars.put(name, var);
    }

    protected Object getVar(String name) {
        return vars.get(name);
    }

    @SuppressWarnings("unchecked")
    protected <E> E getVar(String name, Class<E> type) {
        return (E) vars.get(name);
    }
}