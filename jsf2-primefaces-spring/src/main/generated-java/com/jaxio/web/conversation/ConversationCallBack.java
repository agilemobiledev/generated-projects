/*
 * (c) Copyright 2005-2012 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring:src/main/java/conversation/ConversationCallBack.p.vm.java
 */
package com.jaxio.web.conversation;

import java.io.Serializable;

/**
 * CallBacks should be invoked by a controller at the end of a @{link ConversationContext} life.
 * A CallBack enables the creator of the conversation context to know which action led to the context termination.
 * For example, a conversation context can be created to let a user select an entity among a list of entities. When the user selects 
 * an entity, the controller invokes the selected(T entity) method. 
 * This allow the creator to do something with the selected entity (e.g add it or set it somewhere...).
 */
public class ConversationCallBack<T> implements Serializable {

    private static final long serialVersionUID = 1L;

    public ConversationCallBack() {
    }

    final public String ok(T entity) {
        popContext();
        onOk(entity);
        return currentContext().outcome();
    }

    /**
     * The given entity has been oked. Example: it could mean
     * that it is a newly created entity, that it was validated (but not saved) and
     * that it is up to you to decide what to do with it.
     */
    protected void onOk(T entity) {
    }

    final public String selected(T entity) {
        popContext();
        onSelected(entity);
        return currentContext().outcome();
    }

    /**
     * The given entity has been selected.
     */
    protected void onSelected(T entity) {
    }

    final public String saved(T entity) {
        popContext();
        onSaved(entity);
        return currentContext().outcome();
    }

    /**
     * The given entity has just been saved.
     */
    protected void onSaved(T entity) {
    }

    final public String notSaved(T entity) {
        popContext();
        onNotSaved(entity);
        return currentContext().outcome();
    }

    /**
     * The given entity has not been saved.
     */
    protected void onNotSaved(T entity) {
    }

    final public String deleted(T entity) {
        popContext();
        onDeleted(entity);
        return currentContext().outcome();
    }

    /**
     * The given entity has just been deleted.
     */
    protected void onDeleted(T entity) {
    }

    final public String back() {
        popContext();
        onBack();
        return currentContext().outcome();
    }

    /**
     * No real action was performed, the user just asked to go back.
     */
    protected void onBack() {
    }

    // Context utils

    private final void popContext() {
        ConversationManager.getInstance().getCurrentConversation().popContext();
    }

    private final ConversationContext<?> currentContext() {
        return ConversationManager.getInstance().getCurrentConversation().getCurrentContext();
    }
}