/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package fr.jaxio.demo.service;

import static org.fest.assertions.Assertions.*;
import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import fr.jaxio.demo.domain.Address;
import fr.jaxio.demo.service.AddressServiceImpl;
import fr.jaxio.demo.dao.AddressDao;
import fr.jaxio.demo.dao.support.SearchParameters;

/**
 * Unit test on AddressServiceImpl
 */
public class AddressServiceImplTest {

    private AddressServiceImpl addressServiceImpl;
    private AddressDao addressDao;

    @Before
    public void setUp() {
        // called before each test.
        addressServiceImpl = new AddressServiceImpl();
        addressDao = mock(AddressDao.class);
        addressServiceImpl.setAddressDao(addressDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        Address none = null;

        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenReturn(none);

        Address result = addressServiceImpl.findUniqueOrNone(new Address());

        assertThat(result).isNull();
        verify(addressDao, times(1)).findUniqueOrNone(any(Address.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        Address unique = new Address();

        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenReturn(unique);

        Address result = addressServiceImpl.findUniqueOrNone(new Address());

        assertThat(result).isNotNull();
        verify(addressDao, times(1)).findUniqueOrNone(any(Address.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(addressDao.findUniqueOrNone(any(Address.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        addressServiceImpl.findUniqueOrNone(new Address());
    }

    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        addressServiceImpl.findUnique(new Address());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        Address unique = new Address();

        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenReturn(unique);

        Address result = addressServiceImpl.findUnique(new Address());

        assertThat(result).isNotNull();
        verify(addressDao, times(1)).findUnique(any(Address.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(addressDao.findUnique(any(Address.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        addressServiceImpl.findUnique(new Address());
    }
}