/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package fr.jaxio.demo.service;

import static org.fest.assertions.Assertions.*;
import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import fr.jaxio.demo.domain.Account;
import fr.jaxio.demo.service.AccountServiceImpl;
import fr.jaxio.demo.dao.AccountDao;
import fr.jaxio.demo.domain.Civility;
import fr.jaxio.demo.dao.support.SearchParameters;

/**
 * Unit test on AccountServiceImpl
 */
public class AccountServiceImplTest {

    private AccountServiceImpl accountServiceImpl;
    private AccountDao accountDao;

    @Before
    public void setUp() {
        // called before each test.
        accountServiceImpl = new AccountServiceImpl();
        accountDao = mock(AccountDao.class);
        accountServiceImpl.setAccountDao(accountDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        Account none = null;

        when(accountDao.findUniqueOrNone(any(Account.class), any(SearchParameters.class))).thenReturn(none);

        Account result = accountServiceImpl.findUniqueOrNone(new Account());

        assertThat(result).isNull();
        verify(accountDao, times(1)).findUniqueOrNone(any(Account.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        Account unique = new Account();

        when(accountDao.findUniqueOrNone(any(Account.class), any(SearchParameters.class))).thenReturn(unique);

        Account result = accountServiceImpl.findUniqueOrNone(new Account());

        assertThat(result).isNotNull();
        verify(accountDao, times(1)).findUniqueOrNone(any(Account.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(accountDao.findUniqueOrNone(any(Account.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        accountServiceImpl.findUniqueOrNone(new Account());
    }

    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(accountDao.findUnique(any(Account.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        accountServiceImpl.findUnique(new Account());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        Account unique = new Account();

        when(accountDao.findUnique(any(Account.class), any(SearchParameters.class))).thenReturn(unique);

        Account result = accountServiceImpl.findUnique(new Account());

        assertThat(result).isNotNull();
        verify(accountDao, times(1)).findUnique(any(Account.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(accountDao.findUnique(any(Account.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        accountServiceImpl.findUnique(new Account());
    }
}