/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package fr.jaxio.demo.service;

import static org.fest.assertions.Assertions.*;
import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import fr.jaxio.demo.domain.Legacy;
import fr.jaxio.demo.service.LegacyServiceImpl;
import fr.jaxio.demo.dao.LegacyDao;
import fr.jaxio.demo.dao.support.SearchParameters;

/**
 * Unit test on LegacyServiceImpl
 */
public class LegacyServiceImplTest {

    private LegacyServiceImpl legacyServiceImpl;
    private LegacyDao legacyDao;

    @Before
    public void setUp() {
        // called before each test.
        legacyServiceImpl = new LegacyServiceImpl();
        legacyDao = mock(LegacyDao.class);
        legacyServiceImpl.setLegacyDao(legacyDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        Legacy none = null;

        when(legacyDao.findUniqueOrNone(any(Legacy.class), any(SearchParameters.class))).thenReturn(none);

        Legacy result = legacyServiceImpl.findUniqueOrNone(new Legacy());

        assertThat(result).isNull();
        verify(legacyDao, times(1)).findUniqueOrNone(any(Legacy.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        Legacy unique = new Legacy();

        when(legacyDao.findUniqueOrNone(any(Legacy.class), any(SearchParameters.class))).thenReturn(unique);

        Legacy result = legacyServiceImpl.findUniqueOrNone(new Legacy());

        assertThat(result).isNotNull();
        verify(legacyDao, times(1)).findUniqueOrNone(any(Legacy.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(legacyDao.findUniqueOrNone(any(Legacy.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        legacyServiceImpl.findUniqueOrNone(new Legacy());
    }

    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(legacyDao.findUnique(any(Legacy.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        legacyServiceImpl.findUnique(new Legacy());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        Legacy unique = new Legacy();

        when(legacyDao.findUnique(any(Legacy.class), any(SearchParameters.class))).thenReturn(unique);

        Legacy result = legacyServiceImpl.findUnique(new Legacy());

        assertThat(result).isNotNull();
        verify(legacyDao, times(1)).findUnique(any(Legacy.class), any(SearchParameters.class));
    }

    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(legacyDao.findUnique(any(Legacy.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        legacyServiceImpl.findUnique(new Legacy());
    }
}