/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-selenium-primefaces:src/test/java/selenium/SeleniumScenarioIT.p.vm.java
 */
package fr.jaxio.demo.web.selenium;

import static org.fest.assertions.Assertions.assertThat;

import org.junit.Rule;
import org.junit.Test;

import fr.jaxio.demo.web.selenium.page.account.AccountEditPage;
import fr.jaxio.demo.web.selenium.page.account.AccountSearchPage;
import fr.jaxio.demo.web.selenium.page.document.DocumentEditPage;
import fr.jaxio.demo.web.selenium.page.document.DocumentSearchPage;
import fr.jaxio.demo.web.selenium.page.document.DocumentTabPage;
import fr.jaxio.demo.web.selenium.page.role.RoleSearchPage;
import fr.jaxio.demo.web.selenium.page.role.RoleTabPage;

import fr.jaxio.demo.web.selenium.support.ClientRule;
import fr.jaxio.demo.web.selenium.support.Client;
import fr.jaxio.demo.web.selenium.page.AnonymousHomePage;
import fr.jaxio.demo.web.selenium.page.LoggedHomePage;
import fr.jaxio.demo.web.selenium.page.LoginPage;

@SuppressWarnings("unused")
public class SeleniumScenarioIT {
    @Rule
    public ClientRule clientRule = new ClientRule(this);

    LoginPage loginPage;
    AnonymousHomePage anonymousHomePage;
    LoggedHomePage loggedHomePage;

    // account
    AccountSearchPage accountSearchPage;
    AccountEditPage accountEditPage;

    // document
    DocumentSearchPage documentSearchPage;
    DocumentEditPage documentEditPage;
    DocumentTabPage documentTab;

    RoleTabPage roleTabPage;
    RoleSearchPage roleSearchPage;

    @Test
    public void simpleTest() {
        Client client = clientRule.getClient();
        client.page("/app/home?locale=en");
    }

    @Test
    public void asAnUnknownUserICannotLogIn() throws InterruptedException {
        Client client = clientRule.getClient();
        client.page("/app/home?locale=en");

        client.step("Login as unknown_user, and verify it is not valid");
        client.click(anonymousHomePage.connexionLink);
        loginPage.login("unknownUser", "invalidPassword");
        client.text("Invalid login or password");

    }

    @Test
    public void asAnAdminICanUpdateAUserAndLogInWithThisUpdatedUser() throws InterruptedException {
        Client client = clientRule.getClient();
        client.page("/app/home?locale=en");
        String userName = "user19";

        loginAsAnAdmin(client);
        searchForAccounts(client);
        searchAndEditAccount(client, userName);
        logout(client);
        loginAsPreviouslyModifiedUser(client);
        logBackAsAnAdmin(client);
        revertChangesDoneToUser(client, userName);
    }

    private void loginAsAnAdmin(Client client) {
        client.step("Login as admin");
        client.click(anonymousHomePage.connexionLink);
        loginPage.login("admin", "admin");
        client.click(loggedHomePage.accountLink);
        assertThat(accountSearchPage.searchResultsRegion.getText()).isEmpty();
    }

    private void searchForAccounts(Client client) {
        client.step("Search by mail and verify ajax, next/previous navigation");
        accountSearchPage.searchByEmail("1");
        client.difference(accountSearchPage.searchResultsRegion, "");
        client.text(accountSearchPage.paginatorText, "1 / 2");
        assertThat(accountSearchPage.searchResultsRegion.getText()).isEqualTo("13 results");
        client.click(accountSearchPage.paginatorNextButton);
        client.text(accountSearchPage.paginatorText, "2 / 2");
        client.click(accountSearchPage.paginatorPrevButton);
        client.text(accountSearchPage.paginatorText, "1 / 2");
    }

    private void searchAndEditAccount(Client client, String userName) {
        selectAccount(client, userName);
        updateAccount(client);
        addRoleAdminToAccount(client);
        addDocumentToAccount(client);
        saveToDatabase(client);
    }

    private void updateAccount(Client client) {
        client.text("Username (required)");
        accountEditPage.update("cnorris", "kickass", "gmail@chucknorris.com");
        client.click(accountEditPage.submitButton);
        client.text("Submitted data received, validation skipped, binded on model, not saved in database");
    }

    private void selectAccount(Client client, String userName) {
        client.step("Search by username, select the user, and update its value");
        accountSearchPage.searchByUsername(userName);
        client.text(userName + "@example.com");
        accountSearchPage.clickEditAccount(userName);
    }

    private void addRoleAdminToAccount(Client client) {
        client.step("Add a ROLE_ADMIN to the selected user");
        client.click(accountEditPage.rolesTab);
        client.click(roleTabPage.selectButton);
        roleSearchPage.searchByRolename("ADMIN");
        roleSearchPage.clickSelectRole("ROLE_ADMIN");
        client.text("Roles: Selected existing and added it, but not saved in database");
    }

    private void addDocumentToAccount(Client client) {
        client.step("Add a document");
        client.click(accountEditPage.documentsTab);
        client.click(documentTab.addButton);
        documentEditPage.sendDocumentBinary("./src/test/resources/no_extension");
        client.warning("Error is expected");
        client.text("Invalid file type.");
        documentEditPage.sendDocumentBinary("./src/test/resources/for_upload.txt");
        client.click(documentTab.okButton);
    }

    private void saveToDatabase(Client client) {
        client.step("Save to database");
        client.click(accountEditPage.saveButton);
        client.text("Saved OK in database");
    }

    private void logout(Client client) {
        client.step("Logout");
        client.click(loggedHomePage.logoutLink);
    }

    private void loginAsPreviouslyModifiedUser(Client client) {
        client.step("Let's try to log as cnorris as set previously");
        client.click(anonymousHomePage.connexionLink);
        loginPage.login("cnorris", "kickass");
        client.click(loggedHomePage.accountLink);
    }

    private void logBackAsAnAdmin(Client client) {
        client.step("Now log back as admin and search for chuck norris");
        client.click(loggedHomePage.logoutLink);
        client.click(anonymousHomePage.connexionLink);
        loginPage.login("admin", "admin");
        client.click(loggedHomePage.accountLink);
        accountSearchPage.searchByUsername("cnorris");
        client.text("gmail@chucknorris.com");
    }

    private void revertChangesDoneToUser(Client client, String userName) {
        client.step("Select account and revert previous changes");
        accountSearchPage.clickEditAccount("cnorris");
        client.text("Username (required)");
        accountEditPage.update(userName, userName, userName + "@example.com");
        client.click(accountEditPage.booksTab);
        client.click(accountEditPage.documentsTab);
        client.click(accountEditPage.rolesTab);
        roleTabPage.clickDeleteRole("ROLE_ADMIN");
        client.click(accountEditPage.saveButton);
        client.text("Saved OK in database");
    }
}